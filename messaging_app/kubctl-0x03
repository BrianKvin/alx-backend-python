#!/bin/bash

# Rolling Update Script for Django Messaging App
# This script performs rolling updates with zero downtime monitoring

set -e  # Exit on any error

# Configuration
NAMESPACE="default"
DEPLOYMENT_NAME="django-messaging-app-blue"
SERVICE_NAME="django-messaging-service"
DEPLOYMENT_FILE="blue_deployment.yaml"
ROLLOUT_TIMEOUT="600s"
CURL_TIMEOUT=5
TEST_INTERVAL=2
HEALTH_ENDPOINT="/health/"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_test() {
    echo -e "${CYAN}[TEST]${NC} $1"
}

# Function to get service URL
get_service_url() {
    local service_name=$1
    local port=""
    local service_type=""
    
    # Get service type and port
    service_type=$(kubectl get service $service_name -n $NAMESPACE -o jsonpath='{.spec.type}' 2>/dev/null || echo "")
    
    if [ -z "$service_type" ]; then
        print_error "Service $service_name not found"
        return 1
    fi
    
    case $service_type in
        "LoadBalancer")
            # Try to get external IP
            external_ip=$(kubectl get service $service_name -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
            if [ -z "$external_ip" ]; then
                external_ip=$(kubectl get service $service_name -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
            fi
            
            if [ -n "$external_ip" ]; then
                port=$(kubectl get service $service_name -n $NAMESPACE -o jsonpath='{.spec.ports[0].port}')
                echo "http://$external_ip:$port"
            else
                print_warning "LoadBalancer external IP not available, using port-forward"
                return 1
            fi
            ;;
        "NodePort")
            # Get node IP and NodePort
            node_ip=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="ExternalIP")].address}' 2>/dev/null || echo "")
            if [ -z "$node_ip" ]; then
                node_ip=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}' 2>/dev/null || echo "")
            fi
            
            if [ -n "$node_ip" ]; then
                port=$(kubectl get service $service_name -n $NAMESPACE -o jsonpath='{.spec.ports[0].nodePort}')
                echo "http://$node_ip:$port"
            else
                print_warning "NodePort access not available, using port-forward"
                return 1
            fi
            ;;
        "ClusterIP"|*)
            # Use port-forward for ClusterIP services
            return 1
            ;;
    esac
}

# Function to start port-forward
start_port_forward() {
    local service_name=$1
    local local_port=${2:-8080}
    local service_port=$(kubectl get service $service_name -n $NAMESPACE -o jsonpath='{.spec.ports[0].port}')
    
    print_status "Starting port-forward for service $service_name..."
    kubectl port-forward service/$service_name -n $NAMESPACE $local_port:$service_port >/dev/null 2>&1 &
    PORT_FORWARD_PID=$!
    
    # Wait for port-forward to be ready
    sleep 3
    
    # Check if port-forward is working
    if kill -0 $PORT_FORWARD_PID 2>/dev/null; then
        print_success "Port-forward started (PID: $PORT_FORWARD_PID)"
        echo "http://localhost:$local_port"
    else
        print_error "Failed to start port-forward"
        return 1
    fi
}

# Function to stop port-forward
stop_port_forward() {
    if [ -n "$PORT_FORWARD_PID" ] && kill -0 $PORT_FORWARD_PID 2>/dev/null; then
        print_status "Stopping port-forward (PID: $PORT_FORWARD_PID)..."
        kill $PORT_FORWARD_PID
        wait $PORT_FORWARD_PID 2>/dev/null || true
        print_success "Port-forward stopped"
    fi
}

# Function to test application availability
test_application() {
    local base_url=$1
    local endpoint=${2:-$HEALTH_ENDPOINT}
    local test_url="$base_url$endpoint"
    
    local response=$(curl -s -w "HTTPSTATUS:%{http_code};TIME:%{time_total}" \
                         --connect-timeout $CURL_TIMEOUT \
                         --max-time $CURL_TIMEOUT \
                         "$test_url" 2>/dev/null || echo "HTTPSTATUS:000;TIME:0")
    
    local http_code=$(echo "$response" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
    local time_total=$(echo "$response" | grep -o "TIME:[0-9.]*" | cut -d: -f2)
    local body=$(echo "$response" | sed -E 's/HTTPSTATUS:[0-9]*;TIME:[0-9.]*$//')
    
    if [ "$http_code" = "200" ]; then
        printf "${GREEN}✓${NC} HTTP $http_code (${time_total}s)"
        return 0
    elif [ "$http_code" = "000" ]; then
        printf "${RED}✗${NC} Connection failed"
        return 1
    else
        printf "${YELLOW}!${NC} HTTP $http_code (${time_total}s)"
        return 1
    fi
}

# Function to monitor application during rolling update
monitor_application() {
    local base_url=$1
    local duration=${2:-300}  # Default 5 minutes
    
    print_test "Starting application monitoring for $duration seconds..."
    print_test "Testing URL: $base_url$HEALTH_ENDPOINT"
    
    local start_time=$(date +%s)
    local end_time=$((start_time + duration))
    local total_requests=0
    local failed_requests=0
    local consecutive_failures=0
    local max_consecutive_failures=0
    
    printf "%-20s %-15s %-15s %-15s %-15s\n" "Time" "Status" "Total" "Failed" "Failure Rate"
    printf "%-20s %-15s %-15s %-15s %-15s\n" "----" "------" "-----" "------" "------------"
    
    while [ $(date +%s) -lt $end_time ]; do
        local current_time=$(date '+%H:%M:%S')
        total_requests=$((total_requests + 1))
        
        if test_application "$base_url" "$HEALTH_ENDPOINT"; then
            consecutive_failures=0
            printf " | %-12s | %-6d | %-6d | %6.2f%%\n" \
                   "$current_time" "$total_requests" "$failed_requests" \
                   $(echo "scale=2; $failed_requests * 100 / $total_requests" | bc -l 2>/dev/null || echo "0.00")
        else
            failed_requests=$((failed_requests + 1))
            consecutive_failures=$((consecutive_failures + 1))
            if [ $consecutive_failures -gt $max_consecutive_failures ]; then
                max_consecutive_failures=$consecutive_failures
            fi
            printf " | %-12s | %-6d | %-6d | %6.2f%%\n" \
                   "$current_time" "$total_requests" "$failed_requests" \
                   $(echo "scale=2; $failed_requests * 100 / $total_requests" | bc -l 2>/dev/null || echo "0.00")
        fi
        
        sleep $TEST_INTERVAL
    done
    
    # Summary
    local failure_rate=$(echo "scale=2; $failed_requests * 100 / $total_requests" | bc -l 2>/dev/null || echo "0.00")
    
    echo ""
    print_test "=== MONITORING SUMMARY ==="
    echo "Duration: $duration seconds"
    echo "Total requests: $total_requests"
    echo "Failed requests: $failed_requests"
    echo "Failure rate: $failure_rate%"
    echo "Max consecutive failures: $max_consecutive_failures"
    
    if [ "$failed_requests" -eq 0 ]; then
        print_success "No downtime detected during rolling update!"
    elif [ $(echo "$failure_rate < 1" | bc -l 2>/dev/null || echo "0") -eq 1 ]; then
        print_success "Minimal downtime detected (< 1% failure rate)"
    else
        print_warning "Significant downtime detected ($failure_rate% failure rate)"
    fi
}

# Function to check deployment status
check_deployment_status() {
    local deployment_name=$1
    
    print_status "Current deployment status:"
    
    # Get deployment info
    kubectl get deployment $deployment_name -n $NAMESPACE -o wide 2>/dev/null || {
        print_error "Deployment $deployment_name not found"
        return 1
    }
    
    echo ""
    print_status "Pod status:"
    kubectl get pods -n $NAMESPACE -l app=django-messaging-app --sort-by=.metadata.creationTimestamp
    
    echo ""
    print_status "Deployment conditions:"
    kubectl describe deployment $deployment_name -n $NAMESPACE | grep -A 5 "Conditions:" || true
}

# Function to verify rolling update completion
verify_rollout_completion() {
    local deployment_name=$1
    
    print_status "Verifying rollout completion..."
    
    # Check if rollout is complete
    if kubectl rollout status deployment/$deployment_name -n $NAMESPACE --timeout=30s >/dev/null 2>&1; then
        print_success "Rollout completed successfully"
    else
        print_warning "Rollout status check timed out"
    fi
    
    # Get current image version
    local current_image=$(kubectl get deployment $deployment_name -n $NAMESPACE -o jsonpath='{.spec.template.spec.containers[0].image}')
    print_status "Current image: $current_image"
    
    # Get pod details
    echo ""
    print_status "Current pods after rollout:"
    kubectl get pods -n $NAMESPACE -l app=django-messaging-app -o custom-columns=NAME:.metadata.name,STATUS:.status.phase,AGE:.metadata.creationTimestamp,IMAGE:.spec.containers[0].image --sort-by=.metadata.creationTimestamp
    
    # Check if all pods are running the new image
    local pods_with_old_image=$(kubectl get pods -n $NAMESPACE -l app=django-messaging-app -o jsonpath='{.items[*].spec.containers[0].image}' | tr ' ' '\n' | grep -v "$current_image" | wc -l)
    
    if [ "$pods_with_old_image" -eq 0 ]; then
        print_success "All pods are running the new image version"
    else
        print_warning "$pods_with_old_image pods are still running the old image"
    fi
}

# Function to perform rolling update
perform_rolling_update() {
    print_status "=== DJANGO MESSAGING APP ROLLING UPDATE ==="
    print_status "Deployment: $DEPLOYMENT_NAME"
    print_status "Namespace: $NAMESPACE"
    print_status "File: $DEPLOYMENT_FILE"
    echo ""
    
    # Check if deployment exists
    if ! kubectl get deployment $DEPLOYMENT_NAME -n $NAMESPACE >/dev/null 2>&1; then
        print_error "Deployment $DEPLOYMENT_NAME not found in namespace $NAMESPACE"
        print_status "Available deployments:"
        kubectl get deployments -n $NAMESPACE
        exit 1
    fi
    
    # Show current status
    print_status "Current deployment status:"
    check_deployment_status $DEPLOYMENT_NAME
    echo ""
    
    # Get current image version
    local old_image=$(kubectl get deployment $DEPLOYMENT_NAME -n $NAMESPACE -o jsonpath='{.spec.template.spec.containers[0].image}')
    print_status "Current image: $old_image"
    
    # Get service URL
    local service_url=""
    if service_url=$(get_service_url $SERVICE_NAME); then
        print_status "Service URL: $service_url"
    else
        print_status "Using port-forward for service access..."
        service_url=$(start_port_forward $SERVICE_NAME 8080)
        print_status "Service URL: $service_url"
    fi
    
    # Test application before update
    print_test "Testing application before update..."
    if test_application "$service_url"; then
        print_success " - Application is accessible"
    else
        print_warning " - Application test failed before update"
    fi
    echo ""
    
    # Apply the updated deployment
    print_status "Applying updated deployment file: $DEPLOYMENT_FILE"
    kubectl apply -f $DEPLOYMENT_FILE -n $NAMESPACE || {
        print_error "Failed to apply deployment file"
        stop_port_forward
        exit 1
    }
    
    # Get new image version
    local new_image=$(kubectl get deployment $DEPLOYMENT_NAME -n $NAMESPACE -o jsonpath='{.spec.template.spec.containers[0].image}')
    print_status "New image: $new_image"
    
    if [ "$old_image" = "$new_image" ]; then
        print_warning "No image change detected. Rolling update may not trigger."
    fi
    
    # Start monitoring in background
    print_status "Starting application monitoring..."
    monitor_application "$service_url" 180 &
    MONITOR_PID=$!
    
    # Monitor rollout progress
    print_status "Monitoring rollout progress..."
    kubectl rollout status deployment/$DEPLOYMENT_NAME -n $NAMESPACE --timeout=$ROLLOUT_TIMEOUT || {
        print_error "Rollout failed or timed out"
        
        # Stop monitoring
        if kill -0 $MONITOR_PID 2>/dev/null; then
            kill $MONITOR_PID
            wait $MONITOR_PID 2>/dev/null || true
        fi
        
        # Show rollout history
        print_status "Rollout history:"
        kubectl rollout history deployment/$DEPLOYMENT_NAME -n $NAMESPACE
        
        stop_port_forward
        exit 1
    }
    
    print_success "Rolling update completed successfully!"
    
    # Wait for monitoring to complete
    print_status "Waiting for monitoring to complete..."
    wait $MONITOR_PID 2>/dev/null || true
    
    # Verify rollout completion
    echo ""
    verify_rollout_completion $DEPLOYMENT_NAME
    
    # Final application test
    echo ""
    print_test "Final application test..."
    if test_application "$service_url"; then
        print_success " - Application is accessible after update"
    else
        print_error " - Application test failed after update"
    fi
    
    # Cleanup
    stop_port_forward
    
    print_success "Rolling update process completed!"
}

# Function to show rollout history
show_rollout_history() {
    print_status "Rollout history for $DEPLOYMENT_NAME:"
    kubectl rollout history deployment/$DEPLOYMENT_NAME -n $NAMESPACE
    
    echo ""
    print_status "Current deployment details:"
    kubectl describe deployment $DEPLOYMENT_NAME -n $NAMESPACE | head -20
}

# Function to rollback deployment
rollback_deployment() {
    local revision=${1:-}
    
    if [ -n "$revision" ]; then
        print_status "Rolling back to revision $revision..."
        kubectl rollout undo deployment/$DEPLOYMENT_NAME -n $NAMESPACE --to-revision=$revision
    else
        print_status "Rolling back to previous revision..."
        kubectl rollout undo deployment/$DEPLOYMENT_NAME -n $NAMESPACE
    fi
    
    # Monitor rollback
    print_status "Monitoring rollback progress..."
    kubectl rollout status deployment/$DEPLOYMENT_NAME -n $NAMESPACE --timeout=$ROLLOUT_TIMEOUT
    
    print_success "Rollback completed!"
    verify_rollout_completion $DEPLOYMENT_NAME
}

# Cleanup function
cleanup() {
    print_status "Cleaning up..."
    stop_port_forward
    
    # Kill monitoring process if still running
    if [ -n "$MONITOR_PID" ] && kill -0 $MONITOR_PID 2>/dev/null; then
        kill $MONITOR_PID
        wait $MONITOR_PID 2>/dev/null || true
    fi
}

# Trap cleanup on exit
trap cleanup EXIT

# Main function
main() {
    local action=${1:-update}
    
    # Check if kubectl is available
    if ! command -v kubectl &> /dev/null; then
        print_error "kubectl is not installed or not in PATH"
        exit 1
    fi
    
    # Check if bc is available (for calculations)
    if ! command -v bc &> /dev/null; then
        print_warning "bc is not installed. Some calculations may not work properly."
    fi
    
    # Check cluster connectivity
    if ! kubectl cluster-info >/dev/null 2>&1; then
        print_error "Cannot connect to Kubernetes cluster"
        exit 1
    fi
    
    case $action in
        "update"|"rolling-update")
            perform_rolling_update
            ;;
        "status")
            check_deployment_status $DEPLOYMENT_NAME
            ;;
        "history")
            show_rollout_history
            ;;
        "rollback")
            rollback_deployment "$2"
            ;;
        "monitor")
            local service_url=""
            if service_url=$(get_service_url $SERVICE_NAME); then
                print_status "Service URL: $service_url"
            else
                service_url=$(start_port_forward $SERVICE_NAME 8080)
                print_status "Service URL: $service_url"
            fi
            monitor_application "$service_url" "${2:-60}"
            ;;
        *)
            echo "Usage: $0 {update|status|history|rollback|monitor}"
            echo ""
            echo "Commands:"
            echo "  update     - Perform rolling update (default)"
            echo "  status     - Show current deployment status"
            echo "  history    - Show rollout history"
            echo "  rollback   - Rollback to previous version"
            echo "  monitor    - Monitor application availability"
            echo ""
            echo "Examples:"
            echo "  $0 update"
            echo "  $0 status"
            echo "  $0 history"
            echo "  $0 rollback"
            echo "  $0 rollback 2"
            echo "  $0 monitor 120"
            exit 1
            ;;
    esac
}

# Run main function
main "$@"