name: Django CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: test_messaging_app
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libmysqlclient-dev pkg-config
    
    - name: Install Python dependencies
      working-directory: ./messaging_app
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-django pytest-cov flake8 mysqlclient
    
    - name: Wait for MySQL to be ready
      run: |
        while ! mysqladmin ping -h "127.0.0.1" -P 3306 -u root -prootpassword --silent; do
          echo "Waiting for MySQL..."
          sleep 1
        done
    
    - name: Set up test database
      working-directory: ./messaging_app
      env:
        DB_NAME: test_messaging_app
        DB_USER: testuser
        DB_PASSWORD: testpass
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
      run: |
        python manage.py migrate --settings=messaging_app.settings.test
    
    - name: Run flake8 linting
      working-directory: ./messaging_app
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run tests with coverage
      working-directory: ./messaging_app
      env:
        DB_NAME: test_messaging_app
        DB_USER: testuser
        DB_PASSWORD: testpass
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html --junitxml=test-results.xml
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./messaging_app/coverage.xml
        directory: ./messaging_app/
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          messaging_app/test-results.xml
          messaging_app/htmlcov/
    
    - name: Upload coverage reports as artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-reports-${{ matrix.python-version }}
        path: |
          messaging_app/coverage.xml
          messaging_app/htmlcov/

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      working-directory: ./messaging_app
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        pip install -r requirements.txt
    
    - name: Run flake8
      working-directory: ./messaging_app
      run: |
        flake8 . --max-line-length=127 --exclude=venv,migrations --output-file=flake8-report.txt
        cat flake8-report.txt
    
    - name: Check code formatting with black
      working-directory: ./messaging_app
      run: |
        black --check --diff .
    
    - name: Check import sorting with isort
      working-directory: ./messaging_app
      run: |
        isort --check-only --diff .
    
    - name: Type checking with mypy
      working-directory: ./messaging_app
      run: |
        mypy . --ignore-missing-imports || true
    
    - name: Upload linting reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: code-quality-reports
        path: messaging_app/flake8-report.txt