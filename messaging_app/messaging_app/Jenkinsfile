pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'your-dockerhub-username/messaging-app'
        DOCKER_TAG = "${BUILD_NUMBER}"
        DOCKER_CREDENTIALS = 'docker-hub-credentials'
        GITHUB_CREDENTIALS = 'github-credentials'
    }
    
    stages {
        stage('Checkout') {
            steps {
                // Pull source code from GitHub
                git branch: 'main', 
                    credentialsId: "${GITHUB_CREDENTIALS}",
                    url: 'https://github.com/your-username/alx-backend-python.git'
            }
        }
        
        stage('Setup Python Environment') {
            steps {
                script {
                    // Change to messaging_app directory and install dependencies
                    dir('messaging_app') {
                        // Install Python dependencies from messaging_app/requirements.txt
                        sh '''
                            python3 -m venv venv
                            . venv/bin/activate
                            pip3 install --upgrade pip
                            pip3 install -r messaging_app/requirements.txt
                            pip3 install pytest pytest-django pytest-cov flake8
                        '''
                    }
                }
            }
        }
        
        stage('Database Setup') {
            steps {
                script {
                    dir('messaging_app') {
                        sh '''
                            . venv/bin/activate
                            python manage.py migrate --settings=messaging_app.settings.test
                        '''
                    }
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                script {
                    dir('messaging_app') {
                        sh '''
                            . venv/bin/activate
                            pytest --junitxml=test-results.xml --cov=. --cov-report=xml --cov-report=html
                        '''
                    }
                }
            }
            post {
                always {
                    // Publish test results
                    junit 'messaging_app/test-results.xml'
                    
                    // Archive test reports
                    archiveArtifacts artifacts: 'messaging_app/htmlcov/**', fingerprint: true
                    
                    // Publish coverage reports
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'messaging_app/htmlcov',
                        reportFiles: 'index.html',
                        reportName: 'Coverage Report'
                    ])
                }
            }
        }
        
        stage('Code Quality') {
            steps {
                script {
                    dir('messaging_app') {
                        sh '''
                            . venv/bin/activate
                            flake8 . --output-file=flake8-report.txt --tee
                        '''
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'messaging_app/flake8-report.txt', fingerprint: true
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    dir('messaging_app') {
                        // Build Docker image
                        def dockerImage = docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                        
                        // Also tag as latest
                        dockerImage.tag("latest")
                        
                        // Store image for later use
                        env.DOCKER_IMAGE_ID = dockerImage.id
                    }
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    dir('messaging_app') {
                        // Push to Docker Hub
                        docker.withRegistry('https://registry.hub.docker.com', "${DOCKER_CREDENTIALS}") {
                            def dockerImage = docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}")
                            dockerImage.push()
                            dockerImage.push("latest")
                        }
                    }
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                script {
                    // Clean up local Docker images to save space
                    sh "docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG} || true"
                    sh "docker rmi ${DOCKER_IMAGE}:latest || true"
                }
            }
        }
    }
    
    post {
        always {
            // Clean workspace
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
            // You can add notification steps here (email, Slack, etc.)
        }
        failure {
            echo 'Pipeline failed!'
            // You can add failure notification steps here
        }
    }
}