#!/bin/bash

# Blue-Green Deployment Script for Django Messaging App
# This script automates the blue-green deployment process

set -e  # Exit on any error

# Configuration
NAMESPACE="default"
APP_NAME="django-messaging-app"
DEPLOYMENT_TIMEOUT="300s"
HEALTH_CHECK_RETRIES=10
HEALTH_CHECK_DELAY=30

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if deployment is ready
check_deployment_ready() {
    local deployment_name=$1
    local timeout=$2
    
    print_status "Waiting for deployment $deployment_name to be ready..."
    
    if kubectl wait --for=condition=available --timeout=$timeout deployment/$deployment_name -n $NAMESPACE; then
        print_success "Deployment $deployment_name is ready"
        return 0
    else
        print_error "Deployment $deployment_name failed to become ready within timeout"
        return 1
    fi
}

# Function to check pod health
check_pod_health() {
    local version=$1
    local retries=$2
    local delay=$3
    
    print_status "Checking health of $version pods..."
    
    for ((i=1; i<=retries; i++)); do
        echo "Health check attempt $i/$retries for $version deployment..."
        
        # Get pod names for the version
        pods=$(kubectl get pods -n $NAMESPACE -l app=$APP_NAME,version=$version -o jsonpath='{.items[*].metadata.name}')
        
        if [ -z "$pods" ]; then
            print_warning "No pods found for $version deployment (attempt $i/$retries)"
            sleep $delay
            continue
        fi
        
        # Check if all pods are ready
        all_ready=true
        for pod in $pods; do
            ready=$(kubectl get pod $pod -n $NAMESPACE -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')
            if [ "$ready" != "True" ]; then
                all_ready=false
                break
            fi
        done
        
        if [ "$all_ready" = true ]; then
            print_success "All $version pods are healthy"
            return 0
        else
            print_warning "Some $version pods are not ready yet (attempt $i/$retries)"
            sleep $delay
        fi
    done
    
    print_error "Health check failed for $version deployment after $retries attempts"
    return 1
}

# Function to get logs from deployment
get_deployment_logs() {
    local version=$1
    local lines=${2:-50}
    
    print_status "Getting logs from $version deployment (last $lines lines)..."
    
    pods=$(kubectl get pods -n $NAMESPACE -l app=$APP_NAME,version=$version -o jsonpath='{.items[*].metadata.name}')
    
    if [ -z "$pods" ]; then
        print_warning "No pods found for $version deployment"
        return 1
    fi
    
    for pod in $pods; do
        echo "--- Logs from pod: $pod ---"
        kubectl logs $pod -n $NAMESPACE --tail=$lines || print_warning "Failed to get logs from $pod"
        echo ""
    done
}

# Function to switch traffic
switch_traffic() {
    local target_version=$1
    
    print_status "Switching traffic to $target_version deployment..."
    
    # Update the main service selector
    kubectl patch service django-messaging-service -n $NAMESPACE -p '{"spec":{"selector":{"app":"'$APP_NAME'","version":"'$target_version'"}}}'
    
    # Update external service if it exists
    if kubectl get service django-messaging-external -n $NAMESPACE >/dev/null 2>&1; then
        kubectl patch service django-messaging-external -n $NAMESPACE -p '{"spec":{"selector":{"app":"'$APP_NAME'","version":"'$target_version'"}}}'
    fi
    
    print_success "Traffic switched to $target_version deployment"
}

# Function to rollback
rollback() {
    local current_version=$1
    local previous_version=$2
    
    print_warning "Rolling back from $current_version to $previous_version..."
    switch_traffic $previous_version
    print_success "Rollback completed"
}

# Function to cleanup old deployment
cleanup_deployment() {
    local version=$1
    
    read -p "Do you want to delete the $version deployment? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        print_status "Deleting $version deployment..."
        kubectl delete deployment $APP_NAME-$version -n $NAMESPACE || print_warning "Failed to delete $version deployment"
        print_success "$version deployment cleaned up"
    else
        print_status "Keeping $version deployment for potential rollback"
    fi
}

# Main deployment function
deploy() {
    local action=$1
    local current_version=""
    local new_version=""
    
    # Determine current and new versions
    if kubectl get deployment $APP_NAME-blue -n $NAMESPACE >/dev/null 2>&1; then
        if kubectl get service django-messaging-service -n $NAMESPACE -o jsonpath='{.spec.selector.version}' | grep -q "blue"; then
            current_version="blue"
            new_version="green"
        else
            current_version="green"
            new_version="blue"
        fi
    else
        current_version=""
        new_version="blue"
    fi
    
    print_status "Current version: ${current_version:-none}, New version: $new_version"
    
    case $action in
        "deploy")
            # Step 1: Apply shared resources first
            print_status "Applying shared resources..."
            kubectl apply -f blue_deployment.yaml -n $NAMESPACE || {
                print_error "Failed to apply shared resources"
                exit 1
            }
            
            # Step 2: Deploy new version
            print_status "Deploying $new_version version..."
            if [ "$new_version" = "blue" ]; then
                kubectl apply -f blue_deployment.yaml -n $NAMESPACE
            else
                kubectl apply -f green_deployment.yaml -n $NAMESPACE
            fi
            
            # Step 3: Apply services
            print_status "Applying services..."
            kubectl apply -f kubeservice.yaml -n $NAMESPACE
            
            # Step 4: Wait for deployment to be ready
            check_deployment_ready "$APP_NAME-$new_version" $DEPLOYMENT_TIMEOUT || {
                print_error "New deployment failed to become ready"
                get_deployment_logs $new_version
                exit 1
            }
            
            # Step 5: Health check
            check_pod_health $new_version $HEALTH_CHECK_RETRIES $HEALTH_CHECK_DELAY || {
                print_error "Health check failed for new deployment"
                get_deployment_logs $new_version
                
                if [ -n "$current_version" ]; then
                    rollback $new_version $current_version
                fi
                exit 1
            }
            
            # Step 6: Get logs to verify deployment
            get_deployment_logs $new_version 20
            
            # Step 7: Switch traffic
            read -p "Deploy looks healthy. Switch traffic to $new_version? (y/N): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                switch_traffic $new_version
                print_success "Deployment completed successfully!"
                
                # Optional cleanup
                if [ -n "$current_version" ]; then
                    cleanup_deployment $current_version
                fi
            else
                print_status "Deployment completed but traffic not switched. You can manually switch later."
            fi
            ;;
            
        "switch")
            if [ -z "$current_version" ]; then
                print_error "No current deployment found"
                exit 1
            fi
            
            target_version=""
            if [ "$current_version" = "blue" ]; then
                target_version="green"
            else
                target_version="blue"
            fi
            
            # Check if target deployment exists and is ready
            if ! kubectl get deployment $APP_NAME-$target_version -n $NAMESPACE >/dev/null 2>&1; then
                print_error "$target_version deployment not found"
                exit 1
            fi
            
            check_deployment_ready "$APP_NAME-$target_version" "30s" || {
                print_error "$target_version deployment is not ready"
                exit 1
            }
            
            switch_traffic $target_version
            ;;
            
        "rollback")
            if [ -z "$current_version" ]; then
                print_error "No current deployment found"
                exit 1
            fi
            
            previous_version=""
            if [ "$current_version" = "blue" ]; then
                previous_version="green"
            else
                previous_version="blue"
            fi
            
            # Check if previous deployment exists
            if ! kubectl get deployment $APP_NAME-$previous_version -n $NAMESPACE >/dev/null 2>&1; then
                print_error "$previous_version deployment not found for rollback"
                exit 1
            fi
            
            rollback $current_version $previous_version
            ;;
            
        "status")
            print_status "Blue-Green Deployment Status:"
            echo ""
            
            # Check deployments
            echo "=== Deployments ==="
            kubectl get deployments -n $NAMESPACE -l app=$APP_NAME 2>/dev/null || print_warning "No deployments found"
            echo ""
            
            # Check services
            echo "=== Services ==="
            kubectl get services -n $NAMESPACE -l app=$APP_NAME 2>/dev/null || print_warning "No services found"
            echo ""
            
            # Check current traffic routing
            if kubectl get service django-messaging-service -n $NAMESPACE >/dev/null 2>&1; then
                current_target=$(kubectl get service django-messaging-service -n $NAMESPACE -o jsonpath='{.spec.selector.version}')
                print_status "Current traffic is routed to: ${current_target:-unknown}"
            fi
            echo ""
            
            # Check pods
            echo "=== Pods ==="
            kubectl get pods -n $NAMESPACE -l app=$APP_NAME 2>/dev/null || print_warning "No pods found"
            ;;
            
        "logs")
            version=${2:-$current_version}
            lines=${3:-50}
            
            if [ -z "$version" ]; then
                print_error "No version specified and no current deployment found"
                exit 1
            fi
            
            get_deployment_logs $version $lines
            ;;
            
        *)
            echo "Usage: $0 {deploy|switch|rollback|status|logs}"
            echo ""
            echo "Commands:"
            echo "  deploy   - Deploy new version using blue-green strategy"
            echo "  switch   - Switch traffic between blue and green"
            echo "  rollback - Rollback to previous version"
            echo "  status   - Show current deployment status"
            echo "  logs     - Show logs from deployments"
            echo ""
            echo "Examples:"
            echo "  $0 deploy"
            echo "  $0 switch"
            echo "  $0 rollback"
            echo "  $0 status"
            echo "  $0 logs blue 100"
            exit 1
            ;;
    esac
}

# Main execution
main() {
    print_status "Django Messaging App - Blue-Green Deployment Script"
    print_status "Namespace: $NAMESPACE"
    echo ""
    
    # Check if kubectl is available
    if ! command -v kubectl &> /dev/null; then
        print_error "kubectl is not installed or not in PATH"
        exit 1
    fi
    
    # Check cluster connectivity
    if ! kubectl cluster-info >/dev/null 2>&1; then
        print_error "Cannot connect to Kubernetes cluster"
        exit 1
    fi
    
    deploy "$@"
}

# Run main function with all arguments
main "$@"