#!/bin/bash

# kurbeScript - Kubernetes Local Setup Script

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to install minikube
install_minikube() {
    print_status "Installing minikube..."
    
    # Detect OS
    OS=$(uname -s)
    ARCH=$(uname -m)
    
    case $OS in
        "Linux")
            if [[ $ARCH == "x86_64" ]]; then
                curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
                sudo install minikube-linux-amd64 /usr/local/bin/minikube
                rm minikube-linux-amd64
            elif [[ $ARCH == "aarch64" ]]; then
                curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-arm64
                sudo install minikube-linux-arm64 /usr/local/bin/minikube
                rm minikube-linux-arm64
            fi
            ;;
        "Darwin")
            if [[ $ARCH == "x86_64" ]]; then
                curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-darwin-amd64
                sudo install minikube-darwin-amd64 /usr/local/bin/minikube
                rm minikube-darwin-amd64
            elif [[ $ARCH == "arm64" ]]; then
                curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-darwin-arm64
                sudo install minikube-darwin-arm64 /usr/local/bin/minikube
                rm minikube-darwin-arm64
            fi
            ;;
        *)
            print_error "Unsupported operating system: $OS"
            exit 1
            ;;
    esac
    
    print_success "Minikube installed successfully!"
}

# Function to install kubectl
install_kubectl() {
    print_status "Installing kubectl..."
    
    # Detect OS
    OS=$(uname -s | tr '[:upper:]' '[:lower:]')
    ARCH=$(uname -m)
    
    case $ARCH in
        "x86_64") ARCH="amd64" ;;
        "aarch64") ARCH="arm64" ;;
        "arm64") ARCH="arm64" ;;
    esac
    
    # Download kubectl
    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/${OS}/${ARCH}/kubectl"
    
    # Install kubectl
    chmod +x kubectl
    sudo mv kubectl /usr/local/bin/
    
    print_success "kubectl installed successfully!"
}

# Function to check prerequisites
check_prerequisites() {
    print_status "Checking prerequisites..."
    
    # Check if minikube is installed
    if ! command_exists minikube; then
        print_warning "minikube not found. Installing..."
        install_minikube
    else
        print_success "minikube is already installed"
        minikube version
    fi
    
    # Check if kubectl is installed
    if ! command_exists kubectl; then
        print_warning "kubectl not found. Installing..."
        install_kubectl
    else
        print_success "kubectl is already installed"
        kubectl version --client --short 2>/dev/null || kubectl version --client
    fi
    
    # Check if Docker is running (preferred driver)
    if command_exists docker && docker info >/dev/null 2>&1; then
        print_success "Docker is running and will be used as the driver"
        DRIVER="docker"
    else
        print_warning "Docker not available. Will use default driver"
        DRIVER=""
    fi
}

# Function to start minikube cluster
start_cluster() {
    print_status "Starting Kubernetes cluster with minikube..."
    
    # Check if minikube is already running
    if minikube status >/dev/null 2>&1; then
        print_warning "Minikube cluster is already running"
        minikube status
    else
        # Start minikube with appropriate driver
        if [[ -n "$DRIVER" ]]; then
            minikube start --driver=$DRIVER
        else
            minikube start
        fi
        print_success "Kubernetes cluster started successfully!"
    fi
}

# Function to verify cluster is running
verify_cluster() {
    print_status "Verifying cluster is running..."
    
    # Wait for cluster to be ready
    print_status "Waiting for cluster to be ready..."
    kubectl wait --for=condition=Ready nodes --all --timeout=300s
    
    # Display cluster info
    print_success "Cluster is running! Here's the cluster information:"
    echo "----------------------------------------"
    kubectl cluster-info
    echo "----------------------------------------"
}

# Function to retrieve available pods
get_pods() {
    print_status "Retrieving available pods..."
    
    echo "Pods in all namespaces:"
    echo "----------------------------------------"
    kubectl get pods --all-namespaces
    echo "----------------------------------------"
    
    echo "Pods in default namespace:"
    echo "----------------------------------------"
    kubectl get pods
    echo "----------------------------------------"
}

# Function to display helpful information
display_info() {
    print_success "Kubernetes cluster setup complete!"
    echo ""
    print_status "Useful commands:"
    echo "  minikube status          - Check cluster status"
    echo "  minikube stop            - Stop the cluster"
    echo "  minikube delete          - Delete the cluster"
    echo "  kubectl get nodes        - List cluster nodes"
    echo "  kubectl get pods         - List pods in default namespace"
    echo "  kubectl get pods -A      - List pods in all namespaces"
    echo "  minikube dashboard       - Open Kubernetes dashboard"
    echo ""
    print_status "To access the Kubernetes dashboard, run:"
    echo "  minikube dashboard"
}

# Main execution
main() {
    echo "================================================"
    echo "    Kubernetes Local Setup Script (kurbeScript)"
    echo "================================================"
    echo ""
    
    # Check prerequisites and install if needed
    check_prerequisites
    echo ""
    
    # Start the cluster
    start_cluster
    echo ""
    
    # Verify cluster is running
    verify_cluster
    echo ""
    
    # Retrieve available pods
    get_pods
    echo ""
    
    # Display helpful information
    display_info
}

# Run main function
main